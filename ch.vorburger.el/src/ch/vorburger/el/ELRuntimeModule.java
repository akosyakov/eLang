/*
 * generated by Xtext
 */
package ch.vorburger.el;

import org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider;
import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.DerivedStateAwareResource;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.featurecalls.IdentifiableSimpleNameProvider;
import org.eclipse.xtext.xbase.interpreter.IExpressionInterpreter;
import org.eclipse.xtext.xbase.jvmmodel.JvmGlobalScopeProvider;
import org.eclipse.xtext.xbase.jvmmodel.JvmTypesBuilder;
import org.eclipse.xtext.xbase.typing.ITypeProvider;

import ch.vorburger.el.engine.Expression;
import ch.vorburger.el.engine.ExpressionImpl;
import ch.vorburger.el.generator.ELCompiler;
import ch.vorburger.el.interpreter.ELInterpreter;
import ch.vorburger.el.jvmmodel.ELIdentifiableSimpleNameProvider;
import ch.vorburger.el.naming.ELQualifiedNameProvider;
import ch.vorburger.el.scoping.ELExtensionClassNameProvider;
import ch.vorburger.el.scoping.ELScopeProvider;
import ch.vorburger.el.scoping.ELTypeScopeProvider;
import ch.vorburger.el.typing.ELJvmTypeProviderFactory;
import ch.vorburger.el.typing.ELJvmTypesBuilder;
import ch.vorburger.el.typing.ELTypeProvider;
import ch.vorburger.el.typing.Ecore2JvmTypeMapper;
import ch.vorburger.el.valueconverter.ELValueConverterService;

import com.google.inject.Singleton;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
@SuppressWarnings({"restriction", "deprecation"})
public class ELRuntimeModule extends ch.vorburger.el.AbstractELRuntimeModule {

	// Strictly EL-related (non-Xtext) bindings
	
	public Class<? extends Expression> bindExpression() {
		return ExpressionImpl.class;
	}

	
 	// -------------------------------------------------------------------
 	// Usual Xtext API relating binding overrides
	
	public Class<? extends XbaseCompiler> bindXbaseCompiler() {
		return ELCompiler.class;
	}
	
	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return ELValueConverterService.class;
	}

	@Override
	public Class<? extends IdentifiableSimpleNameProvider> bindIdentifiableSimpleNameProvider() {
		return ELIdentifiableSimpleNameProvider.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return ELQualifiedNameProvider.class;
	}

	@Override
	public Class<? extends org.eclipse.xtext.xbase.scoping.featurecalls.StaticImplicitMethodsFeatureForTypeProvider.ExtensionClassNameProvider> bindStaticImplicitMethodsFeatureForTypeProvider$ExtensionClassNameProvider() {
		return ELExtensionClassNameProvider.class;
	}
	
	@Override
	public Class<? extends ITypeProvider> bindITypeProvider() {
		return ELTypeProvider.class;
	}

	@Override
	public Class<? extends IExpressionInterpreter> bindIExpressionInterpreter() {
		return ELInterpreter.class;
	}
	
	@Override
	@Singleton
	public Class<? extends IScopeProvider> bindIScopeProvider() {
		return ELScopeProvider.class;
	}

	@Override
	public Class<? extends org.eclipse.xtext.common.types.access.IJvmTypeProvider.Factory> bindIJvmTypeProvider$Factory() {
		return ELJvmTypeProviderFactory.class;
	}
	
	public Class<? extends Ecore2JvmTypeMapper> bindEcore2JvmTypeMapper() {
		return Ecore2JvmTypeMapper.class;
	}
	
	public Class<? extends JvmTypesBuilder> bindJvmTypesBuilder() {
		return ELJvmTypesBuilder.class;
	}

	@Override
	public Class<? extends AbstractTypeScopeProvider> bindAbstractTypeScopeProvider() {
		return ELTypeScopeProvider.class;
	}
	
	@Override
	public Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return JvmGlobalScopeProvider.class;
	}
	
	@Override
	public Class<? extends org.eclipse.xtext.resource.XtextResource> bindXtextResource() {
		// NOT return org.eclipse.xtext.xbase.resource.BatchLinkableResource.class;
		// but let's use the classic older one (which I understand..), to debug more easily when stuff goes wrong:
		// (Historical note: There was some confusion at the time of DS-6553 <http://www.eclipse.org/forums/index.php/m/1118458/#msg_1118458>
		//  that this caused issues during the upgrade from Xtext v2.3.1 to v2.4.3, but it turned out those were unrelated to this.) 
		return DerivedStateAwareResource.class;
	}
}
