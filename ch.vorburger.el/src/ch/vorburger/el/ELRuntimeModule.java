/*
 * generated by Xtext
 */
package ch.vorburger.el;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.xbase.compiler.XbaseCompiler;
import org.eclipse.xtext.xbase.interpreter.IExpressionInterpreter;
import org.eclipse.xtext.xbase.scoping.batch.ImplicitlyImportedTypes;
import org.eclipse.xtext.xbase.typesystem.computation.ITypeComputer;

import ch.vorburger.el.engine.Expression;
import ch.vorburger.el.engine.ExpressionImpl;
import ch.vorburger.el.generator.ELCompiler;
import ch.vorburger.el.generator.ELGenerator;
import ch.vorburger.el.interpreter.ELInterpreter;
import ch.vorburger.el.naming.ELQualifiedNameProvider;
import ch.vorburger.el.scoping.batch.ELImplicitlyImportedTypes;
import ch.vorburger.el.typesystem.computation.ELTypeComputer;
import ch.vorburger.el.valueconverter.ELValueConverterService;

/**
 * Use this class to register components to be used at runtime / without the
 * Equinox extension registry.
 */
@SuppressWarnings("restriction")
public class ELRuntimeModule extends ch.vorburger.el.AbstractELRuntimeModule {

	public Class<? extends XbaseCompiler> bindXbaseCompiler() {
		return ELCompiler.class;
	}
	
	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return ELValueConverterService.class;
	}

	@Override
	public Class<? extends IQualifiedNameProvider> bindIQualifiedNameProvider() {
		return ELQualifiedNameProvider.class;
	}
	
	public Class<? extends ImplicitlyImportedTypes> bindImplicitlyImportedTypes() {
		return ELImplicitlyImportedTypes.class;
	}
	
	@Override
	public Class<? extends ITypeComputer> bindITypeComputer() {
		return ELTypeComputer.class;
	}

	@Override
	public Class<? extends IExpressionInterpreter> bindIExpressionInterpreter() {
		return ELInterpreter.class;
	}
	
	@Override
	public Class<? extends IGenerator> bindIGenerator() {
		return ELGenerator.class;
	}
	
	public Class<? extends Expression> bindExpression() {
		return ExpressionImpl.class;
	}

}
