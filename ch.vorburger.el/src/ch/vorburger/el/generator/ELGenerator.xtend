/*
 * generated by Xtext
 */
package ch.vorburger.el.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.naming.IQualifiedNameProvider
import com.google.inject.Inject
import org.eclipse.xtext.xbase.XExpression
import org.eclipse.xtext.xbase.XLiteral
import org.eclipse.xtext.common.types.*
import org.eclipse.xtext.xbase.compiler.*

class ELGenerator implements IGenerator {
	
	@Inject extension IQualifiedNameProvider nameProvider
	
	@Inject ELCompiler elCompiler
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		val XExpression expr = resource.contents.filter(typeof(XExpression)).head;
		fsa.generateFile("ExpressionWrapper.java",	expr.compile);
	}
	
	def compile(XExpression e) ''' 
		«val importManager = new ImportManager(true)»
		import java.math.BigDecimal;
		import ch.vorburger.el.lib.*;
		
		public class ExpressionWrapper {
			public Object evaluate() {
				«elCompiler.compile(e, importManager)»
			}
		}
	'''	
}
